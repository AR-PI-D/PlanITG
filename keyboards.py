from telegram import InlineKeyboardButton, InlineKeyboardMarkup


def main_menu():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚Üê –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π", callback_data='prev_day'),
            InlineKeyboardButton("–ù–∞—Å—Ç—É–ø–Ω–∏–π ‚Üí", callback_data='next_day')
        ],
        [
            InlineKeyboardButton("–°—å–æ–≥–æ–¥–Ω—ñ üè†", callback_data='today')
        ],
        [InlineKeyboardButton("–†–æ–∑–∫–ª–∞–¥ üóì", callback_data='schedule')],
        [InlineKeyboardButton("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚öôÔ∏è", callback_data='settings')]
    ])

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –¥–Ω—è–º–∏ —Ç–∏–∂–Ω—è (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ "–ó–º—ñ–Ω–∏—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å")
def days_keyboard():
    days = [
        ("–ü–æ–Ω–µ–¥—ñ–ª–æ–∫ ‚òïÔ∏è", "–ø–æ–Ω–µ–¥—ñ–ª–æ–∫"),
        ("–í—ñ–≤—Ç–æ—Ä–æ–∫ üìò", "–≤—ñ–≤—Ç–æ—Ä–æ–∫"),
        ("–°–µ—Ä–µ–¥–∞ üß†", "—Å–µ—Ä–µ–¥–∞"),
        ("–ß–µ—Ç–≤–µ—Ä üíº", "—á–µ—Ç–≤–µ—Ä"),
        ("–ü'—è—Ç–Ω–∏—Ü—è üéä", "–ø'—è—Ç–Ω–∏—Ü—è"),
        ("–°—É–±–æ—Ç–∞ üõå", "—Å—É–±–æ—Ç–∞"),
        ("–ù–µ–¥—ñ–ª—è üåÖ", "–Ω–µ–¥—ñ–ª—è")
    ]
    keyboard = [
        [InlineKeyboardButton(text, callback_data=data)] for text, data in days
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∏–±–æ—Ä—É –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∑–∞–º—ñ–Ω–∏
def subjects_keyboard(subjects):
    keyboard = [
        [InlineKeyboardButton(subject["name"], callback_data=f"change_{subject['id']}")]
        for subject in subjects
    ]
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_day")])
    return InlineKeyboardMarkup(keyboard)


def weeks_keyboard():
    weeks = [
        ("–¢–∏–∂–¥–µ–Ω—å 1", "week1"),
        ("–¢–∏–∂–¥–µ–Ω—å 2", "week2"),
        ("–¢–∏–∂–¥–µ–Ω—å 3", "week3"),
        ("–¢–∏–∂–¥–µ–Ω—å 4", "week4")
    ]
    keyboard = [
        [InlineKeyboardButton(text, callback_data=data)] for text, data in weeks
    ]
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ –¥–Ω—ñ–≤", callback_data="back_to_days")])
    return InlineKeyboardMarkup(keyboard)

def day_menu_keyboard(has_schedule: bool):
    buttons = [
        [InlineKeyboardButton("‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥", callback_data="edit_schedule")]
    ]
    buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –¥–æ –¥–Ω—ñ–≤", callback_data="back_to_days")])
    return InlineKeyboardMarkup(buttons)

def edit_day_keyboard(schedule_ids, subjects, selected_week):
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ —É—Ä–æ–∫—ñ–≤
    for index, subject_id in enumerate(schedule_ids):
        subject = next((s for s in subjects if s["id"] == subject_id), None)
        btn_text = f"{index+1}. {subject['name']}" if subject else f"{index+1} –ü–æ–º–∏–ª–∫–∞"
        keyboard.append([
            InlineKeyboardButton(btn_text, callback_data=f"edit_lesson_{index}"),
            InlineKeyboardButton("üóëÔ∏è", callback_data=f"delete_lesson_{index}")
            ])
    
    # –ù–æ–≤–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–∞—Ä–∏
    keyboard.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø–∞—Ä—É", callback_data="add_lesson")])  # <-- –î–æ–¥–∞–Ω–æ
    
    # –ö–Ω–æ–ø–∫–∏ —Ç–∏–∂–Ω—ñ–≤
    week_btns = [
        InlineKeyboardButton(
            f"{i+1} {'‚úÖ' if f'week{i+1}' == selected_week else ''}",
            callback_data=f"select_week_{i+1}"
        ) for i in range(4)
    ]
    keyboard.append(week_btns)
    
    # –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_day"),
        InlineKeyboardButton("üè† –î–æ–¥–æ–º—É", callback_data="main_menu")
    ])
    
    return InlineKeyboardMarkup(keyboard)


def all_subjects_keyboard(subjects):
    keyboard = [
        [InlineKeyboardButton(subject["name"], callback_data=f"replace_lesson_{subject['id']}")]
        for subject in subjects
    ]
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_lessons")])
    return InlineKeyboardMarkup(keyboard)





# keyboards.py

# keyboards.py

def settings_keyboard(current_repeat: int = 1):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ üìÖ", callback_data='set_starting_week')],
        [InlineKeyboardButton(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∏–∂–Ω—ñ–≤ üîÑ ({current_repeat})", callback_data='set_repeat')],
        [InlineKeyboardButton("–í–∏–∫–ª–∞–¥–∞—á—ñ üë®üè´", callback_data='manage_teachers')],
        [InlineKeyboardButton("–ó–∞–Ω—è—Ç—Ç—è üìö", callback_data='manage_subjects')],  # –ù–æ–≤–∞ –∫–Ω–æ–ø–∫–∞
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='main_menu')]
    ])
# keyboards.py
# keyboards.py
def teachers_keyboard(teachers):
    buttons = []
    for teacher in teachers:
        is_new = not teacher.get('name')
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
        if is_new:
            btn_text = "üÜï –ù–æ–≤–∏–π –≤–∏–∫–ª–∞–¥–∞—á"
        else:
            contact = teacher.get('contact', '')
            btn_text = f"{teacher['name']} ({contact})" if contact else teacher['name']
        
        # –Ñ–¥–∏–Ω–∏–π callback —Ñ–æ—Ä–º–∞—Ç
        callback_data = f"teacher_{teacher['id']}"
        
        row = [
            InlineKeyboardButton(btn_text, callback_data=callback_data),
            InlineKeyboardButton("‚ùå", callback_data=f"delete_teacher_{teacher['id']}")
        ]
        buttons.append(row)
    
    buttons.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –≤–∏–∫–ª–∞–¥–∞—á–∞", callback_data="add_teacher")])
    buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="settings")])
    
    return InlineKeyboardMarkup(buttons)

def teacher_edit_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úèÔ∏è –Ü–º'—è", callback_data="edit_teacher_name"),
            InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç", callback_data="edit_teacher_contact")
        ],
        [InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_teacher")],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥ –¥–æ —Å–ø–∏—Å–∫—É", callback_data="manage_teachers")]
    ])

def repeat_keyboard(current_repeat: int):
    buttons = [
        [InlineKeyboardButton(
            f"{i} {'‚úÖ' if i == current_repeat else ''}", 
            callback_data=f'set_repeat_{i}'
        )] for i in range(1, 5)
    ]
    buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='settings')])
    return InlineKeyboardMarkup(buttons)

def starting_week_keyboard():  # –ù–µ–º–∞—î –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ —É –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—ñ
    buttons = [
        [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É üìù", callback_data='input_date_manually')],
        [InlineKeyboardButton("–°—å–æ–≥–æ–¥–Ω—ñ ‚úÖ", callback_data='set_today')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='settings')]
    ]
    return InlineKeyboardMarkup(buttons)


# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
def subjects_keyboard(subjects):
    buttons = []
    for subject in subjects:
        btn_text = f"{subject['name']} ({subject.get('zoom_link', '–Ω–µ–º–∞—î –ø–æ—Å–∏–ª–∞–Ω–Ω—è')})"
        row = [
            InlineKeyboardButton(btn_text, callback_data=f"subject_{subject['id']}"),
            InlineKeyboardButton("‚ùå", callback_data=f"delete_subject_{subject['id']}")
        ]
        buttons.append(row)
    buttons.append([InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–Ω—è—Ç—Ç—è", callback_data="add_subject")])
    buttons.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="settings")])
    return InlineKeyboardMarkup(buttons)

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—É
def subject_edit_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úèÔ∏è –ù–∞–∑–≤–∞", callback_data="edit_subject_name"),
            InlineKeyboardButton("üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è", callback_data="edit_subject_link")
        ],
        [InlineKeyboardButton("üë®üè´ –í–∏–∫–ª–∞–¥–∞—á", callback_data="edit_subject_teacher")],
        [InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_subject")],
        [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="manage_subjects")]
    ])

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤–∏–±–æ—Ä—É –≤–∏–∫–ª–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç—É
def teachers_list_keyboard(teachers):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(t['name'], callback_data=f"assign_teacher_{t['id']}")] 
        for t in teachers
    ])